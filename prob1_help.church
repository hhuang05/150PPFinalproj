; Author Moses Huang
; Helper functions specifically for problem 1

; TODO
; Can try to abstract these to make it more general

(define (delay expr)
  (lambda() expr))

(define (force promise) 
  (promise))

(define (makeRow n)
    (if (= n 1)
	(list (uniform -1 1))
	(cons (uniform -1 1) (makeRow (- n 1)))))

(define (genData rows cols)
  (define (makeRow n)
    (if (= n 1)
	(list (uniform -1 1))
	(cons (uniform -1 1) (makeRow (- n 1)))))
  (if (= rows 1)
      (list (makeRow cols))
      (cons (makeRow cols) (genData (- rows 1) cols))))

(define (processData data)
  (map (lambda (x) (cdr x)) (cdr data)))

(define (getXs data)
  (map (lambda (x) 
	 (map (lambda (y) (string->number y)) (take x 5))) data))

(define (getY data)
  (map (lambda (x) (string->number (first (reverse x)))) data))
